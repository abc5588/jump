# Generated by Django 3.2.14 on 2022-12-06 04:52

import uuid

import django.core.validators
import simple_history.models
from django.db import migrations, models

import assets.models.asset
import assets.models.node
import common.db.encoder
import common.db.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccountBackupPlan',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('is_periodic', models.BooleanField(default=False, verbose_name='Periodic perform')),
                ('interval', models.IntegerField(blank=True, default=24, null=True, verbose_name='Cycle perform')),
                ('crontab', models.CharField(blank=True, max_length=128, null=True, verbose_name='Regularly perform')),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('types', models.IntegerField(choices=[(255, 'All'), (1, 'Asset'), (2, 'Application')], default=255,
                                              verbose_name='Type')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Account backup plan',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AccountBackupPlanExecution',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date_start', models.DateTimeField(auto_now_add=True, verbose_name='Date start')),
                ('timedelta', models.FloatField(default=0.0, null=True, verbose_name='Time')),
                ('plan_snapshot',
                 models.JSONField(blank=True, default=dict, encoder=common.db.encoder.ModelJSONFieldEncoder, null=True,
                                  verbose_name='Account backup snapshot')),
                ('trigger', models.CharField(choices=[('manual', 'Manual trigger'), ('timing', 'Timing trigger')],
                                             default='manual', max_length=128, verbose_name='Trigger mode')),
                ('reason', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Reason')),
                ('is_success', models.BooleanField(default=False, verbose_name='Is success')),
            ],
            options={
                'verbose_name': 'Account backup execution',
            },
        ),
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='Username')),
                ('password',
                 common.db.fields.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key',
                 common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('become', models.BooleanField(default=True)),
                ('become_method',
                 models.CharField(choices=[('sudo', 'sudo'), ('su', 'su')], default='sudo', max_length=4)),
                ('become_user', models.CharField(default='root', max_length=64)),
                ('_become_pass', models.CharField(blank=True, default='', max_length=128)),
            ],
            options={
                'verbose_name': 'Admin user',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('connectivity', models.CharField(choices=[('unknown', 'Unknown'), ('ok', 'Ok'), ('failed', 'Failed')],
                                                  default='unknown', max_length=16, verbose_name='Connectivity')),
                ('date_verified', models.DateTimeField(null=True, verbose_name='Date verified')),
                ('vendor', models.CharField(blank=True, max_length=64, null=True, verbose_name='Vendor')),
                ('model', models.CharField(blank=True, max_length=54, null=True, verbose_name='Model')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='Serial number')),
                ('cpu_model', models.CharField(blank=True, max_length=64, null=True, verbose_name='CPU model')),
                ('cpu_count', models.IntegerField(null=True, verbose_name='CPU count')),
                ('cpu_cores', models.IntegerField(null=True, verbose_name='CPU cores')),
                ('cpu_vcpus', models.IntegerField(null=True, verbose_name='CPU vcpus')),
                ('memory', models.CharField(blank=True, max_length=64, null=True, verbose_name='Memory')),
                ('disk_total', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Disk total')),
                ('disk_info', models.CharField(blank=True, max_length=1024, null=True, verbose_name='Disk info')),
                ('os', models.CharField(blank=True, max_length=128, null=True, verbose_name='OS')),
                ('os_version', models.CharField(blank=True, max_length=16, null=True, verbose_name='OS version')),
                ('os_arch', models.CharField(blank=True, max_length=16, null=True, verbose_name='OS arch')),
                ('hostname_raw', models.CharField(blank=True, max_length=128, null=True, verbose_name='Hostname raw')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('ip', models.CharField(db_index=True, max_length=128, verbose_name='IP')),
                ('hostname', models.CharField(max_length=128, verbose_name='Hostname')),
                ('protocol',
                 models.CharField(choices=[('ssh', 'SSH'), ('rdp', 'RDP'), ('telnet', 'Telnet'), ('vnc', 'VNC')],
                                  default='ssh', max_length=128, verbose_name='Protocol')),
                ('port', models.IntegerField(default=22, verbose_name='Port')),
                ('protocols', models.CharField(blank=True, default='ssh/22', max_length=128, verbose_name='Protocols')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('public_ip', models.CharField(blank=True, max_length=128, null=True, verbose_name='Public IP')),
                ('number', models.CharField(blank=True, max_length=128, null=True, verbose_name='Asset number')),
                ('created_by', models.CharField(blank=True, max_length=128, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Asset',
                'ordering': ['hostname'],
                'permissions': [('refresh_assethardwareinfo', 'Can refresh asset hardware info'),
                                ('test_assetconnectivity', 'Can test asset connectivity'),
                                ('push_assetsystemuser', 'Can push system user to asset'),
                                ('match_asset', 'Can match asset'), ('add_assettonode', 'Add asset to node'),
                                ('move_assettonode', 'Move asset to node')],
            },
        ),
        migrations.CreateModel(
            name='AssetGroup',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Name')),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Asset group',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AuthBook',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('connectivity', models.CharField(choices=[('unknown', 'Unknown'), ('ok', 'Ok'), ('failed', 'Failed')],
                                                  default='unknown', max_length=16, verbose_name='Connectivity')),
                ('date_verified', models.DateTimeField(null=True, verbose_name='Date verified')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='Username')),
                ('password',
                 common.db.fields.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key',
                 common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('version', models.IntegerField(default=1, verbose_name='Version')),
            ],
            options={
                'verbose_name': 'AuthBook',
                'permissions': [('test_authbook', 'Can test asset account connectivity'),
                                ('view_assetaccountsecret', 'Can view asset account secret'),
                                ('change_assetaccountsecret', 'Can change asset account secret'),
                                ('view_assethistoryaccount', 'Can view asset history account'),
                                ('view_assethistoryaccountsecret', 'Can view asset history account secret')],
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('bandwidth', models.CharField(blank=True, max_length=32, verbose_name='Bandwidth')),
                ('contact', models.CharField(blank=True, max_length=128, verbose_name='Contact')),
                ('phone', models.CharField(blank=True, max_length=32, verbose_name='Phone')),
                ('address', models.CharField(blank=True, max_length=128, verbose_name='Address')),
                ('intranet', models.TextField(blank=True, verbose_name='Intranet')),
                ('extranet', models.TextField(blank=True, verbose_name='Extranet')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('operator', models.CharField(blank=True, max_length=32, verbose_name='Operator')),
                ('created_by', models.CharField(blank=True, max_length=32, verbose_name='Created by')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Cluster',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CommandFilter',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64, verbose_name='Name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(blank=True, default='', max_length=128, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Command filter',
            },
        ),
        migrations.CreateModel(
            name='CommandFilterRule',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('regex', 'Regex'), ('command', 'Command')], default='command',
                                          max_length=16, verbose_name='Type')),
                ('priority', models.IntegerField(default=50, help_text='1-100, the lower the value will be match first',
                                                 validators=[django.core.validators.MinValueValidator(1),
                                                             django.core.validators.MaxValueValidator(100)],
                                                 verbose_name='Priority')),
                ('content', models.TextField(help_text='One line one command', verbose_name='Content')),
                ('ignore_case', models.BooleanField(default=True, verbose_name='Ignore case')),
                ('action', models.IntegerField(choices=[(0, 'Deny'), (9, 'Allow'), (2, 'Reconfirm')], default=0,
                                               verbose_name='Action')),
                ('comment', models.CharField(blank=True, default='', max_length=64, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, default='', max_length=128, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Command filter rule',
                'ordering': ('priority', 'action'),
            },
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
            ],
            options={
                'verbose_name': 'Domain',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='FavoriteAsset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
            ],
        ),
        migrations.CreateModel(
            name='Gateway',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='Username')),
                ('password',
                 common.db.fields.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key',
                 common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('ip', models.CharField(db_index=True, max_length=128, verbose_name='IP')),
                ('port', models.IntegerField(default=22, verbose_name='Port')),
                ('protocol',
                 models.CharField(choices=[('ssh', 'SSH')], default='ssh', max_length=16, verbose_name='Protocol')),
                ('comment', models.CharField(blank=True, max_length=128, null=True, verbose_name='Comment')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
            ],
            options={
                'verbose_name': 'Gateway',
                'permissions': [('test_gateway', 'Test gateway')],
            },
        ),
        migrations.CreateModel(
            name='GatheredUser',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, db_index=True, max_length=32, verbose_name='Username')),
                ('present', models.BooleanField(default=True, verbose_name='Present')),
                ('date_last_login', models.DateTimeField(null=True, verbose_name='Date last login')),
                ('ip_last_login', models.CharField(default='', max_length=39, verbose_name='IP last login')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
            ],
            options={
                'verbose_name': 'GatherUser',
                'ordering': ['asset'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalAuthBook',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('connectivity', models.CharField(choices=[('unknown', 'Unknown'), ('ok', 'Ok'), ('failed', 'Failed')],
                                                  default='unknown', max_length=16, verbose_name='Connectivity')),
                ('date_verified', models.DateTimeField(null=True, verbose_name='Date verified')),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='Username')),
                ('password',
                 common.db.fields.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key',
                 common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(blank=True, editable=False, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(blank=True, editable=False, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('version', models.IntegerField(default=1, verbose_name='Version')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type',
                 models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical AuthBook',
                'verbose_name_plural': 'historical AuthBooks',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('value', models.CharField(max_length=128, verbose_name='Value')),
                ('category', models.CharField(choices=[('S', 'System'), ('U', 'User')], default='U', max_length=128,
                                              verbose_name='Category')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
            ],
            options={
                'verbose_name': 'Label',
                'db_table': 'assets_label',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64, unique=True, verbose_name='Key')),
                ('value', models.CharField(max_length=128, verbose_name='Value')),
                ('full_value', models.CharField(default='', max_length=4096, verbose_name='Full value')),
                ('child_mark', models.IntegerField(default=0)),
                ('date_create', models.DateTimeField(auto_now_add=True)),
                ('parent_key', models.CharField(db_index=True, default='', max_length=64, verbose_name='Parent key')),
                ('assets_amount', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Node',
                'ordering': ['parent_key', 'value'],
                'permissions': [('match_node', 'Can match node')],
            },
            bases=(models.Model, assets.models.node.SomeNodesMixin, assets.models.node.FamilyMixin,
                   assets.models.node.NodeAssetsMixin),
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.SlugField(allow_unicode=True, unique=True, verbose_name='Name')),
                ('base', models.CharField(
                    choices=[('Linux', 'Linux'), ('Unix', 'Unix'), ('MacOS', 'MacOS'), ('BSD', 'BSD'),
                             ('Windows', 'Windows'), ('Other', 'Other')], default='Linux', max_length=16,
                    verbose_name='Base')),
                ('charset', models.CharField(choices=[('utf8', 'UTF-8'), ('gbk', 'GBK')], default='utf8', max_length=8,
                                             verbose_name='Charset')),
                ('meta', common.db.fields.JsonDictTextField(blank=True, null=True, verbose_name='Meta')),
                ('internal', models.BooleanField(default=False, verbose_name='Internal')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Platform',
            },
        ),
        migrations.CreateModel(
            name='SystemUser',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('username', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='Username')),
                ('password',
                 common.db.fields.EncryptCharField(blank=True, max_length=256, null=True, verbose_name='Password')),
                ('private_key',
                 common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH private key')),
                ('public_key', common.db.fields.EncryptTextField(blank=True, null=True, verbose_name='SSH public key')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('created_by', models.CharField(max_length=128, null=True, verbose_name='Created by')),
                ('username_same_with_user', models.BooleanField(default=False, verbose_name='Username same with user')),
                ('type',
                 models.CharField(choices=[('common', 'Common user'), ('admin', 'Admin user')], default='common',
                                  max_length=16, verbose_name='Type')),
                ('priority', models.IntegerField(default=81, help_text='1-100, the lower the value will be match first',
                                                 validators=[django.core.validators.MinValueValidator(1),
                                                             django.core.validators.MaxValueValidator(100)],
                                                 verbose_name='Priority')),
                ('protocol', models.CharField(
                    choices=[('ssh', 'SSH'), ('rdp', 'RDP'), ('telnet', 'Telnet'), ('vnc', 'VNC'), ('mysql', 'MySQL'),
                             ('oracle', 'Oracle'), ('mariadb', 'MariaDB'), ('postgresql', 'PostgreSQL'),
                             ('sqlserver', 'SQLServer'), ('redis', 'Redis'), ('mongodb', 'MongoDB'),
                             ('clickhouse', 'ClickHouse'), ('k8s', 'K8S')], default='ssh', max_length=16,
                    verbose_name='Protocol')),
                ('auto_push', models.BooleanField(default=True, verbose_name='Auto push')),
                ('sudo', models.TextField(default='/bin/whoami', verbose_name='Sudo')),
                ('shell', models.CharField(default='/bin/bash', max_length=64, verbose_name='Shell')),
                ('login_mode',
                 models.CharField(choices=[('auto', 'Automatic managed'), ('manual', 'Manually input')], default='auto',
                                  max_length=10, verbose_name='Login mode')),
                ('sftp_root', models.CharField(default='tmp', max_length=128, verbose_name='SFTP Root')),
                ('token', models.TextField(default='', verbose_name='Token')),
                ('home', models.CharField(blank=True, default='', max_length=4096, verbose_name='Home')),
                ('system_groups',
                 models.CharField(blank=True, default='', max_length=4096, verbose_name='System groups')),
                ('ad_domain', models.CharField(default='', max_length=256)),
                ('su_enabled', models.BooleanField(default=False, verbose_name='User switch')),
                ('assets', models.ManyToManyField(blank=True, related_name='system_users', through='assets.AuthBook',
                                                  to='assets.Asset', verbose_name='Assets')),
            ],
            options={
                'verbose_name': 'System user',
                'ordering': ['name'],
                'permissions': [('match_systemuser', 'Can match system user')],
            },
        ),
    ]
