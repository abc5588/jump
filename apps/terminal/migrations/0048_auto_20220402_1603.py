# Generated by Django 3.1.14 on 2022-04-02 07:06

from urllib.parse import urlparse
from django.utils.translation import ugettext_lazy as _
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid
from django.conf import settings


def util_urlparse(url, default_port=80):
    if '//' not in url:
        url = '//' + url
    if ':' not in url:
        url = f'{url}:{default_port}'
    url = urlparse(url)
    return url


class ProtocolChoices(models.TextChoices):
    http = 'http', 'HTTP'
    https = 'https', 'HTTPS'
    ssh = 'ssh', 'SSH'
    rdp = 'rdp', 'RDP'
    mysql = 'mysql', 'MySQL'
    mariadb = 'mariadb', 'MariaDB'
    postgresql = 'postgresql', 'PostgreSQL'

    @property
    def default_port(self):
        default_port_mapper: dict = {
            self.http: 80,
            self.https: 8443,
            self.ssh: 22,
            self.rdp: 3389,
            self.mysql: 3306,
            self.mariadb: 3306,
            self.postgresql: 5432,
        }
        assert self.name in default_port_mapper, 'No support protocol: {}'.format(self.name)
        return default_port_mapper[self.name]


def initial_default_protocols(apps, schema_editor):
    EndpointProtocol = apps.get_model("terminal", "EndpointProtocol")
    data = [
        {'name': p.name, 'port': p.default_port, 'builtin': True, 'enabled': True}
        for p in ProtocolChoices
    ]
    protocols = [EndpointProtocol(**d) for d in data]
    EndpointProtocol.objects.bulk_create(protocols)


def initial_site_endpoints_to_db_if_need(apps, schema_editor):
    EndpointProtocol = apps.get_model("terminal", "EndpointProtocol")
    Endpoint = apps.get_model("terminal", "Endpoint")
    if not settings.BASE_SITE_URL:
        return
    site = util_urlparse(settings.BASE_SITE_URL, default_port=80)
    site_data = {
        'name': _('Migrate Site Endpoint'),
        'host': site.hostname,
        'comment': _('Migrate site endpoint'),
    }
    endpoint, created = Endpoint.objects.get_or_create(host=site.hostname, defaults=site_data)
    default_protocols = EndpointProtocol.objects.filter(builtin=True)
    endpoint.protocols.set(default_protocols)


def initial_xrdp_endpoints_to_db_if_need(apps, schema_editor):
    if callable(settings.TERMINAL_RDP_ADDR):
        xrdp_addr = settings.TERMINAL_RDP_ADDR()
    else:
        xrdp_addr = settings.TERMINAL_RDP_ADDR

    if not (settings.XRDP_ENABLED and xrdp_addr):
        return
    Protocol = apps.get_model("terminal", "EndpointProtocol")
    Endpoint = apps.get_model("terminal", "Endpoint")
    xrdp = util_urlparse(xrdp_addr, default_port=3389)
    xrdp_data = {
        'name': _('Migrate XRDP Endpoint'),
        'host': xrdp.hostname,
        'comment': _('Migrate xrdp endpoint'),
    }
    endpoint, created = Endpoint.objects.get_or_create(host=xrdp.hostname, defaults=xrdp_data)
    default_rdp_protocol = {
        'name': ProtocolChoices.rdp,
        'port': ProtocolChoices.rdp.default_port,
        'builtin': True,
        'enabled': True
    }
    default_rdp_protocol = Protocol.objects.filter(**default_rdp_protocol).first()
    xrdp_protocol = {
        'name': ProtocolChoices.rdp, 'port': xrdp.port, 'enabled': True
    }
    xrdp_protocol, created = Protocol.objects.get_or_create(**xrdp_protocol, defaults=xrdp_protocol)
    endpoint.protocols.remove(default_rdp_protocol)
    endpoint.protocols.add(xrdp_protocol)


def initial_default_endpoints(apps, schema_editor):
    # base site
    initial_site_endpoints_to_db_if_need(apps, schema_editor)
    initial_xrdp_endpoints_to_db_if_need(apps, schema_editor)


def initial_default_endpoint_rules(apps, schema_editor):
    Endpoint = apps.get_model("terminal", "Endpoint")
    EndpointRule = apps.get_model("terminal", "EndpointRule")
    endpoints = Endpoint.objects.all()
    rules = []
    for priority, endpoint in enumerate(endpoints, 21):
        data = {
            'name': _('Default rules {}').format(endpoint.name),
            'ip_group': '*',
            'priority': priority,
            'endpoint': endpoint,
        }
        rule = EndpointRule(**data)
        rules.append(rule)
    EndpointRule.objects.bulk_create(rules)


def initial_default_data_to_db(apps, schema_editor):
    initial_default_protocols(apps, schema_editor)
    initial_default_endpoints(apps, schema_editor)
    initial_default_endpoint_rules(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('terminal', '0047_auto_20220302_1951'),
    ]

    operations = [
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('host', models.CharField(blank=True, max_length=256, null=True, verbose_name='Host')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Endpoint',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='EndpointRule',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('ip_group', models.TextField(blank=True, default='', verbose_name='IP group')),
                ('priority', models.IntegerField(help_text='1-100, the lower the value will be match first', unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Priority')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('endpoint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rules', to='terminal.endpoint', verbose_name='Endpoint')),
            ],
            options={
                'verbose_name': 'Endpoint rule',
                'ordering': ('priority', 'name'),
            },
        ),
        migrations.CreateModel(
            name='EndpointProtocol',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS'), ('ssh', 'SSH'), ('rdp', 'RDP'), ('mysql', 'MySQL'), ('mariadb', 'MariaDB'), ('postgresql', 'PostgreSQL')], max_length=64, verbose_name='Name')),
                ('port', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)], verbose_name='Port')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enabled')),
                ('builtin', models.BooleanField(default=False, verbose_name='Builtin')),
            ],
            options={
                'verbose_name': 'Endpoint protocol',
                'ordering': ('name',),
                'unique_together': {('name', 'port', 'enabled')},
            },
        ),
        migrations.AddField(
            model_name='endpoint',
            name='protocols',
            field=models.ManyToManyField(related_name='endpoint', to='terminal.EndpointProtocol', verbose_name='ProtocolChoices'),
        ),
        migrations.RunPython(initial_default_data_to_db)
    ]
