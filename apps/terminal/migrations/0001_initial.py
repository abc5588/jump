# Generated by Django 3.2.14 on 2022-12-06 04:52

import uuid

import django.core.validators
import django.utils.timezone
from django.db import migrations, models

import common.db.fields


class Migration(migrations.Migration):
    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Command',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('user', models.CharField(db_index=True, max_length=64, verbose_name='User')),
                ('asset', models.CharField(db_index=True, max_length=128, verbose_name='Asset')),
                ('system_user', models.CharField(db_index=True, max_length=64, verbose_name='System user')),
                ('input', models.CharField(db_index=True, max_length=128, verbose_name='Input')),
                ('output', models.CharField(blank=True, max_length=1024, verbose_name='Output')),
                ('session', models.CharField(db_index=True, max_length=36, verbose_name='Session')),
                ('risk_level',
                 models.SmallIntegerField(choices=[(0, 'Ordinary'), (5, 'Dangerous')], db_index=True, default=0,
                                          verbose_name='Risk level')),
                ('timestamp', models.IntegerField(db_index=True)),
            ],
            options={
                'verbose_name': 'Command record',
                'db_table': 'terminal_command',
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='CommandStorage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('meta', common.db.fields.EncryptJsonDictTextField(default={})),
                ('is_default', models.BooleanField(default=False, verbose_name='Default storage')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('type', models.CharField(choices=[('null', 'Null'), ('server', 'Server'), ('es', 'Elasticsearch')],
                                          default='server', max_length=16, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Command storage',
            },
        ),
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('host', models.CharField(blank=True, max_length=256, verbose_name='Host')),
                ('https_port', common.db.fields.PortField(default=443,
                                                          validators=[django.core.validators.MinValueValidator(0),
                                                                      django.core.validators.MaxValueValidator(65535)],
                                                          verbose_name='HTTPS Port')),
                ('http_port', common.db.fields.PortField(default=80,
                                                         validators=[django.core.validators.MinValueValidator(0),
                                                                     django.core.validators.MaxValueValidator(65535)],
                                                         verbose_name='HTTP Port')),
                ('ssh_port', common.db.fields.PortField(default=2222,
                                                        validators=[django.core.validators.MinValueValidator(0),
                                                                    django.core.validators.MaxValueValidator(65535)],
                                                        verbose_name='SSH Port')),
                ('rdp_port', common.db.fields.PortField(default=3389,
                                                        validators=[django.core.validators.MinValueValidator(0),
                                                                    django.core.validators.MaxValueValidator(65535)],
                                                        verbose_name='RDP Port')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Endpoint',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='EndpointRule',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('ip_group', models.JSONField(default=list, verbose_name='IP group')),
                ('priority',
                 models.IntegerField(help_text='1-100, the lower the value will be match first', unique=True,
                                     validators=[django.core.validators.MinValueValidator(1),
                                                 django.core.validators.MaxValueValidator(100)],
                                     verbose_name='Priority')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Endpoint rule',
                'ordering': ('priority', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ReplayStorage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('meta', common.db.fields.EncryptJsonDictTextField(default={})),
                ('is_default', models.BooleanField(default=False, verbose_name='Default storage')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('type', models.CharField(
                    choices=[('null', 'Null'), ('server', 'Server'), ('s3', 'S3'), ('ceph', 'Ceph'), ('swift', 'Swift'),
                             ('oss', 'OSS'), ('azure', 'Azure'), ('obs', 'OBS'), ('cos', 'COS')], default='server',
                    max_length=16, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'Replay storage',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('user', models.CharField(db_index=True, max_length=128, verbose_name='User')),
                ('user_id', models.CharField(blank=True, db_index=True, default='', max_length=36)),
                ('asset', models.CharField(db_index=True, max_length=128, verbose_name='Asset')),
                ('asset_id', models.CharField(blank=True, db_index=True, default='', max_length=36)),
                ('system_user', models.CharField(db_index=True, max_length=128, verbose_name='System user')),
                ('system_user_id', models.CharField(blank=True, db_index=True, default='', max_length=36)),
                ('login_from', models.CharField(
                    choices=[('ST', 'SSH Terminal'), ('RT', 'RDP Terminal'), ('WT', 'Web Terminal'),
                             ('DT', 'DB Terminal')], default='ST', max_length=2, verbose_name='Login from')),
                ('remote_addr', models.CharField(blank=True, max_length=128, null=True, verbose_name='Remote addr')),
                ('is_success', models.BooleanField(db_index=True, default=True)),
                ('is_finished', models.BooleanField(db_index=True, default=False)),
                ('has_replay', models.BooleanField(default=False, verbose_name='Replay')),
                ('has_command', models.BooleanField(default=False, verbose_name='Command')),
                ('protocol', models.CharField(
                    choices=[('ssh', 'ssh'), ('rdp', 'rdp'), ('vnc', 'vnc'), ('telnet', 'telnet'), ('mysql', 'mysql'),
                             ('oracle', 'oracle'), ('mariadb', 'mariadb'), ('sqlserver', 'sqlserver'),
                             ('postgresql', 'postgresql'), ('redis', 'redis'), ('mongodb', 'MongoDB'),
                             ('clickhouse', 'ClickHouse'), ('k8s', 'kubernetes')], db_index=True, default='ssh',
                    max_length=16)),
                ('date_start',
                 models.DateTimeField(db_index=True, default=django.utils.timezone.now, verbose_name='Date start')),
                ('date_end', models.DateTimeField(null=True, verbose_name='Date end')),
            ],
            options={
                'verbose_name': 'Session record',
                'db_table': 'terminal_session',
                'ordering': ['-date_start'],
                'permissions': [('monitor_session', 'Can monitor session'), ('share_session', 'Can share session'),
                                ('terminate_session', 'Can terminate session'),
                                ('validate_sessionactionperm', 'Can validate session action perm')],
            },
        ),
        migrations.CreateModel(
            name='SessionJoinRecord',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('verify_code', models.CharField(max_length=16, verbose_name='Verify code')),
                ('date_joined', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Date joined')),
                ('date_left', models.DateTimeField(db_index=True, null=True, verbose_name='Date left')),
                ('remote_addr',
                 models.CharField(blank=True, db_index=True, max_length=128, null=True, verbose_name='Remote addr')),
                ('login_from', models.CharField(
                    choices=[('ST', 'SSH Terminal'), ('RT', 'RDP Terminal'), ('WT', 'Web Terminal'),
                             ('DT', 'DB Terminal')], default='WT', max_length=2, verbose_name='Login from')),
                ('is_success', models.BooleanField(db_index=True, default=True, verbose_name='Success')),
                (
                'reason', models.CharField(blank=True, default='-', max_length=1024, null=True, verbose_name='Reason')),
                ('is_finished', models.BooleanField(db_index=True, default=False, verbose_name='Finished')),
            ],
            options={
                'verbose_name': 'Session join record',
                'ordering': ('-date_joined',),
            },
        ),
        migrations.CreateModel(
            name='SessionReplay',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
            ],
            options={
                'verbose_name': 'Session replay',
                'permissions': [('upload_sessionreplay', 'Can upload session replay'),
                                ('download_sessionreplay', 'Can download session replay')],
            },
        ),
        migrations.CreateModel(
            name='SessionSharing',
            fields=[
                ('org_id',
                 models.CharField(blank=True, db_index=True, default='', max_length=36, verbose_name='Organization')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('verify_code', models.CharField(max_length=16, verbose_name='Verify code')),
                ('is_active', models.BooleanField(db_index=True, default=True, verbose_name='Active')),
                ('expired_time', models.IntegerField(db_index=True, default=0, verbose_name='Expired time (min)')),
                ('users', models.TextField(blank=True, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Session sharing',
                'ordering': ('-date_created',),
                'permissions': [('add_supersessionsharing', 'Can add super session sharing')],
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('session_online', models.IntegerField(default=0, verbose_name='Session Online')),
                ('cpu_load', models.FloatField(default=0, verbose_name='CPU Load')),
                ('memory_used', models.FloatField(verbose_name='Memory Used')),
                ('disk_used', models.FloatField(default=0, verbose_name='Disk Used')),
                ('connections', models.IntegerField(default=0, verbose_name='Connections')),
                ('threads', models.IntegerField(default=0, verbose_name='Threads')),
                ('boot_time', models.FloatField(default=0, verbose_name='Boot Time')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Status',
                'db_table': 'terminal_status',
                'get_latest_by': 'date_created',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name',
                 models.CharField(choices=[('kill_session', 'Kill Session')], max_length=128, verbose_name='Name')),
                ('args', models.CharField(max_length=1024, verbose_name='Args')),
                ('kwargs', models.JSONField(default=dict, verbose_name='Kwargs')),
                ('is_finished', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_finished', models.DateTimeField(null=True)),
            ],
            options={
                'verbose_name': 'Task',
                'db_table': 'terminal_task',
            },
        ),
        migrations.CreateModel(
            name='Terminal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, verbose_name='Name')),
                ('type', models.CharField(
                    choices=[('koko', 'KoKo'), ('guacamole', 'Guacamole'), ('omnidb', 'OmniDB'), ('xrdp', 'Xrdp'),
                             ('lion', 'Lion'), ('core', 'Core'), ('celery', 'Celery'), ('magnus', 'Magnus'),
                             ('razor', 'Razor')], default='koko', max_length=64, verbose_name='type')),
                ('remote_addr', models.CharField(blank=True, max_length=128, verbose_name='Remote Address')),
                ('ssh_port', models.IntegerField(default=2222, verbose_name='SSH Port')),
                ('http_port', models.IntegerField(default=5000, verbose_name='HTTP Port')),
                (
                'command_storage', models.CharField(default='default', max_length=128, verbose_name='Command storage')),
                ('replay_storage', models.CharField(default='default', max_length=128, verbose_name='Replay storage')),
                ('is_accepted', models.BooleanField(default=False, verbose_name='Is Accepted')),
                ('is_deleted', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Terminal',
                'db_table': 'terminal',
                'ordering': ('is_accepted',),
                'permissions': (('view_terminalconfig', 'Can view terminal config'),),
            },
        ),
    ]
