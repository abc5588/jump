# Generated by Django 3.1.14 on 2022-04-06 03:38

import common.fields.model
import django.core.validators
from django.db import migrations, models
from django.utils.translation import ugettext_lazy as _
import django.db.models.deletion
from django.conf import settings
from urllib.parse import urlparse
import uuid


def parse_url(url: str):
    if not url.startswith('http'):
        url = 'https://' + url
    url = urlparse(url)
    return url


def migrate_site_endpoint_if_need(apps, schema_editor):
    if not settings.BASE_SITE_URL:
        return
    Endpoint = apps.get_model("terminal", "Endpoint")
    EndpointRule = apps.get_model("terminal", "EndpointRule")
    site = parse_url(settings.BASE_SITE_URL)
    site_port = site.port or 8443
    endpoint_data = {
        'name': _('Default Endpoint'),
        'host': site.hostname,
        'https_port': site_port,
        'created_by': 'System'
    }
    endpoint = Endpoint.objects.create(**endpoint_data)
    endpoint_rule_data = {
        'name': _('Default rule'),
        'ip_group': ['*'],
        'priority': 21,
        'endpoint': endpoint,
        'created_by': 'System'
    }
    EndpointRule.objects.create(**endpoint_rule_data)


def migrate_xrdp_endpoint_if_need(apps, schema_editor):
    if callable(settings.TERMINAL_RDP_ADDR):
        xrdp_addr = settings.TERMINAL_RDP_ADDR()
    else:
        xrdp_addr = settings.TERMINAL_RDP_ADDR
    if not (settings.XRDP_ENABLED and xrdp_addr):
        return

    Endpoint = apps.get_model("terminal", "Endpoint")
    EndpointRule = apps.get_model("terminal", "EndpointRule")
    xrdp = parse_url(xrdp_addr)
    xrdp_port = xrdp.port or 3389
    endpoint_data = {
        'name': _('XRDP Endpoint'),
        'host': xrdp.hostname,
        'rdp_port': xrdp_port,
        'created_by': 'System'
    }
    endpoint, created = Endpoint.objects.get_or_create(host=xrdp.hostname, defaults=endpoint_data)
    if created:
        endpoint_rule_data = {
            'name': _('XRDP rule'),
            'ip_group': ['*'],
            'priority': 22,
            'endpoint': endpoint,
            'created_by': 'System'
        }
        EndpointRule.objects.create(**endpoint_rule_data)
    else:
        endpoint.rdp_port = xrdp.port
        endpoint.save()


def migrate_endpoints(apps, schema_editor):
    migrate_site_endpoint_if_need(apps, schema_editor)
    migrate_xrdp_endpoint_if_need(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('terminal', '0047_auto_20220302_1951'),
    ]

    operations = [
        migrations.CreateModel(
            name='Endpoint',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('host', models.CharField(max_length=256, verbose_name='Host')),
                ('https_port', common.fields.model.PortField(default=8443, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='HTTPS Port')),
                ('http_port', common.fields.model.PortField(default=80, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='HTTP Port')),
                ('ssh_port', common.fields.model.PortField(default=22, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='SSH Port')),
                ('rdp_port', common.fields.model.PortField(default=3389, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='RDP Port')),
                ('mysql_port', common.fields.model.PortField(default=3306, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='MySQL Port')),
                ('mariadb_port', common.fields.model.PortField(default=3306, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='MariaDB Port')),
                ('postgresql_port', common.fields.model.PortField(default=5432, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(65535)], verbose_name='PostgreSQL Port')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
            ],
            options={
                'verbose_name': 'Endpoint',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='EndpointRule',
            fields=[
                ('created_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Created by')),
                ('updated_by', models.CharField(blank=True, max_length=32, null=True, verbose_name='Updated by')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Date created')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='Date updated')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Name')),
                ('ip_group', models.JSONField(default=list, verbose_name='IP group')),
                ('priority', models.IntegerField(help_text='1-100, the lower the value will be match first', unique=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Priority')),
                ('comment', models.TextField(blank=True, default='', verbose_name='Comment')),
                ('endpoint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rules', to='terminal.endpoint', verbose_name='Endpoint')),
            ],
            options={
                'verbose_name': 'Endpoint rule',
                'ordering': ('priority', 'name'),
            },
        ),
        migrations.RunPython(migrate_endpoints),
    ]
